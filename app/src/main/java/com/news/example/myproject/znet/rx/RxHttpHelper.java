package com.news.example.myproject.znet.rx;import android.text.TextUtils;import com.library.global.FConstants;import com.library.util.PreferencesUtils;/** * 用户信息帮助类,用于保存用户ID,TOKEN 等基础信息 * * @author xiemy * @date 2018/2/18 */public class RxHttpHelper {    private volatile static RxHttpHelper sharedInstance;    /**     * 用户 ID     * <>用户ID一直都会存在,没有登录的用户传的是游客ID(游客ID其实就是UID赋的值)</>     */    private int uid = 0;    /**     * 用户 Token     * <>用户登录给token赋值,token不为空为用户已经登录 </>     */    private String token = "";    /**     * 游客 ID     * <>用户退出登录给游客ID赋值,清除token表示用户已经退出登录 </>     */    private int touristsUid = 0;    /**     * 游客类型     * <>根据游客类型判断用户是否登录 userType==-1 为游客类型,默认为游客</>     */    private int userType = -1;    public static RxHttpHelper sharedInstance() {        if (sharedInstance == null) {            synchronized (RxHttpHelper.class) {                if (sharedInstance == null) {                    sharedInstance = new RxHttpHelper();                }            }        }        return sharedInstance;    }    /**     * 设置用户ID     */    public void setUid(int uid) {        sharedInstance().uid = uid;        PreferencesUtils.setIntPreferences(                PreferencesUtils.PreferenceType.USER,                FConstants.UID,                uid);    }    /**     * 获取用户ID     */    public int getUid() {        if (sharedInstance().uid == 0) {            sharedInstance().uid = PreferencesUtils.getIntPreferences(                    PreferencesUtils.PreferenceType.USER,                    FConstants.UID,                    0);        }        return sharedInstance().uid;    }    /**     * 清除用户Token     */    public void clearToken() {        token = "";        PreferencesUtils.remove(                PreferencesUtils.PreferenceType.USER,                FConstants.TOKEN);    }    /**     * 设置用户Token     */    public void setToken(String token) {        sharedInstance().token = token;        PreferencesUtils.setStringPreferences(                PreferencesUtils.PreferenceType.USER,                FConstants.TOKEN,                token);    }    /**     * 获取用户Token     */    public String getToken() {        if (TextUtils.isEmpty(sharedInstance().token) || getUserType() != FConstants.VISITOR_TYPE) {            sharedInstance().token = PreferencesUtils.getStringPreferences(                    PreferencesUtils.PreferenceType.USER,                    FConstants.TOKEN,                    "");        }        return sharedInstance().token;    }    /**     * 设置用户类型     */    public void setUserType(int uType) {        PreferencesUtils.setIntPreferences(                PreferencesUtils.PreferenceType.USER,                FConstants.USER_TYPE,                uType);        sharedInstance().userType = uType;    }    /**     * 获取用户类型     */    private int getUserType() {        if (sharedInstance().userType < 0) {            sharedInstance().userType = PreferencesUtils.getIntPreferences(                    PreferencesUtils.PreferenceType.USER,                    FConstants.USER_TYPE,                    userType);        }        return sharedInstance().userType;    }}